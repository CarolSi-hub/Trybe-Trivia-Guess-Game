{"ast":null,"code":"import _objectSpread from \"/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/src/components/Questions/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchQuestionNAnswer } from '../../services';\nimport { addScore } from '../../store/ducks/player/actions';\nimport getCurrentPlayer from '../../store/ducks/ranking/actions';\nimport './Questions.css';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchQuestions = this.fetchQuestions.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.countdown = this.countdown.bind(this);\n    this.handleClickNextQuestion = this.handleClickNextQuestion.bind(this);\n    this.resetCounter = this.resetCounter.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.setLocalStorage = this.setLocalStorage.bind(this);\n    this.getQuestionLevelScore = this.getQuestionLevelScore.bind(this);\n    this.getCurrentPlayerToState = this.getCurrentPlayerToState.bind(this);\n    this.state = {\n      questions: [],\n      isLoading: true,\n      questionIndex: 0,\n      isDisabled: false,\n      counterInterval: 30,\n      counter: 0\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n    const milisegundos = 1000;\n    setInterval(this.countdown, milisegundos);\n    this.setLocalStorage();\n  }\n\n  setLocalStorage(totalScore = 0, assertions = 0) {\n    const playerProps = this.props.playerProps;\n    const name = playerProps.name,\n          gravatarEmail = playerProps.gravatarEmail;\n    const playerToStorage = {\n      player: {\n        name,\n        assertions,\n        score: totalScore,\n        gravatarEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(playerToStorage));\n  }\n\n  getQuestionLevelScore(questionLevel, levelScore) {\n    switch (questionLevel) {\n      case 'easy':\n        {\n          levelScore = 1;\n          return levelScore;\n        }\n\n      case 'medium':\n        {\n          levelScore = 2;\n          return levelScore;\n        }\n\n      case 'hard':\n        {\n          const hardLevelScore = 3;\n          levelScore = hardLevelScore;\n          return levelScore;\n        }\n\n      default:\n        return levelScore;\n    }\n  }\n\n  getCurrentPlayerToState() {\n    const getCurrentPlayerAction = this.props.getCurrentPlayerAction;\n    const _this$props$playerPro = this.props.playerProps,\n          name = _this$props$playerPro.name,\n          score = _this$props$playerPro.score,\n          hash = _this$props$playerPro.hash;\n    getCurrentPlayerAction(name, score, hash);\n  }\n\n  calculateScore() {\n    const _this$state = this.state,\n          questions = _this$state.questions,\n          questionIndex = _this$state.questionIndex,\n          counterInterval = _this$state.counterInterval;\n    const _this$props = this.props,\n          scoreProps = _this$props.scoreProps,\n          addScoreAction = _this$props.addScoreAction,\n          assertionsProps = _this$props.assertionsProps;\n    const questionLevel = questions[questionIndex].difficulty;\n    const levelScore = 1;\n    const defaultPoint = 10;\n    this.getQuestionLevelScore(questionLevel, levelScore);\n    const totalScore = scoreProps + (defaultPoint + counterInterval * levelScore);\n    const assertions = assertionsProps + 1;\n    addScoreAction(totalScore, assertions);\n    this.setLocalStorage(totalScore, assertions);\n  }\n\n  countdown() {\n    const counterInterval = this.state.counterInterval;\n    return counterInterval > 0 ? this.setState(prevState => _objectSpread({}, prevState, {\n      counterInterval: prevState.counterInterval - 1\n    })) : this.setState({\n      counterInterval: 0,\n      isDisabled: true\n    });\n  }\n\n  async fetchQuestions() {\n    const token = localStorage.getItem('token');\n    const result = await fetchQuestionNAnswer(token);\n    this.setState({\n      questions: result,\n      isLoading: false\n    });\n  }\n\n  resetCounter() {\n    this.setState({\n      counterInterval: 30,\n      counter: 0\n    });\n  }\n\n  handleClick({\n    target\n  }) {\n    this.setState({\n      isDisabled: true\n    });\n    if (target.className === 'correct-answer') this.calculateScore();\n  }\n\n  handleClickNextQuestion() {\n    this.setState(prevState => _objectSpread({}, prevState, {\n      questionIndex: prevState.questionIndex + 1\n    }));\n    this.resetCounter();\n    this.setState({\n      isDisabled: false\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          questions = _this$state2.questions,\n          isLoading = _this$state2.isLoading,\n          questionIndex = _this$state2.questionIndex,\n          isDisabled = _this$state2.isDisabled,\n          counterInterval = _this$state2.counterInterval;\n    if (isLoading) return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Is Loading\");\n    const numberOfQuestions = 4;\n\n    if (questionIndex > numberOfQuestions) {\n      this.getCurrentPlayerToState();\n      return React.createElement(Redirect, {\n        to: \"/feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n    }\n\n    const questionToLoad = questions[questionIndex];\n    return React.createElement(\"div\", {\n      className: \"questions-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header-question-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"question-paragraph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, `Question. ${questionIndex + 1}`), React.createElement(\"h2\", {\n      className: \"timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, `${counterInterval}`)), React.createElement(\"div\", {\n      className: \"category-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"category-paragraph\",\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, questionToLoad.category)), React.createElement(\"div\", {\n      className: \"question-and-answer-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"question-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, questionToLoad.question)), React.createElement(\"div\", {\n      className: \"answer-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, questionToLoad.answers.map(answer => React.createElement(\"button\", {\n      key: answer.position,\n      \"data-testid\": answer.position === 0 ? 'correct-answer' : `wrong-answer-${answer.position - 1}`,\n      type: \"button\",\n      className: answer.position === 0 ? 'correct-answer' : 'wrong-answer',\n      disabled: isDisabled,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, answer.answer)))), React.createElement(\"button\", {\n      className: \"next-question-button\",\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      hidden: !isDisabled,\n      onClick: () => this.handleClickNextQuestion(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Next Question\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  playerProps: state.player,\n  scoreProps: state.player.score,\n  assertionsProps: state.player.assertions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addScoreAction: (score, assertions) => dispatch(addScore(score, assertions)),\n  getCurrentPlayerAction: (name, score, hash) => dispatch(getCurrentPlayer(name, score, hash))\n});\n\nQuestions.propTypes = {\n  scoreProps: PropTypes.number.isRequired,\n  assertionsProps: PropTypes.number.isRequired,\n  addScoreAction: PropTypes.func.isRequired,\n  getCurrentPlayerAction: PropTypes.func.isRequired,\n  playerProps: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n    hash: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired\n  }).isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/src/components/Questions/index.js"],"names":["React","Component","connect","Redirect","PropTypes","fetchQuestionNAnswer","addScore","getCurrentPlayer","Questions","constructor","props","fetchQuestions","bind","handleClick","countdown","handleClickNextQuestion","resetCounter","calculateScore","setLocalStorage","getQuestionLevelScore","getCurrentPlayerToState","state","questions","isLoading","questionIndex","isDisabled","counterInterval","counter","componentDidMount","milisegundos","setInterval","totalScore","assertions","playerProps","name","gravatarEmail","playerToStorage","player","score","localStorage","setItem","JSON","stringify","questionLevel","levelScore","hardLevelScore","getCurrentPlayerAction","hash","scoreProps","addScoreAction","assertionsProps","difficulty","defaultPoint","setState","prevState","token","getItem","result","target","className","render","numberOfQuestions","questionToLoad","category","question","answers","map","answer","position","mapStateToProps","mapDispatchToProps","dispatch","propTypes","number","isRequired","func","shape","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,oBAAT,QAAqC,gBAArC;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAO,iBAAP;;AAEA,MAAMC,SAAN,SAAwBP,SAAxB,CAAkC;AAChCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKG,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BH,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKK,cAAL,GAAsB,KAAKA,cAAL,CAAoBL,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKM,eAAL,GAAuB,KAAKA,eAAL,CAAqBN,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKO,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BP,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKQ,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BR,IAA7B,CAAkC,IAAlC,CAA/B;AAEA,SAAKS,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,aAAa,EAAE,CAHJ;AAIXC,MAAAA,UAAU,EAAE,KAJD;AAKXC,MAAAA,eAAe,EAAE,EALN;AAMXC,MAAAA,OAAO,EAAE;AANE,KAAb;AAQD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKjB,cAAL;AACA,UAAMkB,YAAY,GAAG,IAArB;AACAC,IAAAA,WAAW,CAAC,KAAKhB,SAAN,EAAiBe,YAAjB,CAAX;AACA,SAAKX,eAAL;AACD;;AAEDA,EAAAA,eAAe,CAACa,UAAU,GAAG,CAAd,EAAiBC,UAAU,GAAG,CAA9B,EAAiC;AAAA,UACtCC,WADsC,GACtB,KAAKvB,KADiB,CACtCuB,WADsC;AAAA,UAEtCC,IAFsC,GAEdD,WAFc,CAEtCC,IAFsC;AAAA,UAEhCC,aAFgC,GAEdF,WAFc,CAEhCE,aAFgC;AAG9C,UAAMC,eAAe,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAChCH,QAAAA,IADgC;AAEhCF,QAAAA,UAFgC;AAGhCM,QAAAA,KAAK,EAAEP,UAHyB;AAIhCI,QAAAA;AAJgC;AAAV,KAAxB;AAKAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeN,eAAf,CAA9B;AACD;;AAEDjB,EAAAA,qBAAqB,CAACwB,aAAD,EAAgBC,UAAhB,EAA4B;AAC/C,YAAQD,aAAR;AACA,WAAK,MAAL;AAAa;AACXC,UAAAA,UAAU,GAAG,CAAb;AACA,iBAAOA,UAAP;AACD;;AACD,WAAK,QAAL;AAAe;AACbA,UAAAA,UAAU,GAAG,CAAb;AACA,iBAAOA,UAAP;AACD;;AACD,WAAK,MAAL;AAAa;AACX,gBAAMC,cAAc,GAAG,CAAvB;AACAD,UAAAA,UAAU,GAAGC,cAAb;AACA,iBAAOD,UAAP;AACD;;AACD;AACE,eAAOA,UAAP;AAfF;AAiBD;;AAEDxB,EAAAA,uBAAuB,GAAG;AAAA,UAChB0B,sBADgB,GACW,KAAKpC,KADhB,CAChBoC,sBADgB;AAAA,kCAEuB,KAAKpC,KAF5B,CAEhBuB,WAFgB;AAAA,UAEDC,IAFC,yBAEDA,IAFC;AAAA,UAEKI,KAFL,yBAEKA,KAFL;AAAA,UAEYS,IAFZ,yBAEYA,IAFZ;AAGxBD,IAAAA,sBAAsB,CAACZ,IAAD,EAAOI,KAAP,EAAcS,IAAd,CAAtB;AACD;;AAED9B,EAAAA,cAAc,GAAG;AAAA,wBACuC,KAAKI,KAD5C;AAAA,UACPC,SADO,eACPA,SADO;AAAA,UACIE,aADJ,eACIA,aADJ;AAAA,UACmBE,eADnB,eACmBA,eADnB;AAAA,wBAEyC,KAAKhB,KAF9C;AAAA,UAEPsC,UAFO,eAEPA,UAFO;AAAA,UAEKC,cAFL,eAEKA,cAFL;AAAA,UAEqBC,eAFrB,eAEqBA,eAFrB;AAGf,UAAMP,aAAa,GAAGrB,SAAS,CAACE,aAAD,CAAT,CAAyB2B,UAA/C;AACA,UAAMP,UAAU,GAAG,CAAnB;AACA,UAAMQ,YAAY,GAAG,EAArB;AAEA,SAAKjC,qBAAL,CAA2BwB,aAA3B,EAA0CC,UAA1C;AAEA,UAAMb,UAAU,GAAGiB,UAAU,IAAII,YAAY,GAAG1B,eAAe,GAAGkB,UAArC,CAA7B;AAEA,UAAMZ,UAAU,GAAGkB,eAAe,GAAG,CAArC;AAEAD,IAAAA,cAAc,CAAClB,UAAD,EAAaC,UAAb,CAAd;AAEA,SAAKd,eAAL,CAAqBa,UAArB,EAAiCC,UAAjC;AACD;;AAEDlB,EAAAA,SAAS,GAAG;AAAA,UACFY,eADE,GACkB,KAAKL,KADvB,CACFK,eADE;AAEV,WAAOA,eAAe,GAAG,CAAlB,GACH,KAAK2B,QAAL,CAAeC,SAAD,sBAAqBA,SAArB;AACd5B,MAAAA,eAAe,EAAE4B,SAAS,CAAC5B,eAAV,GAA4B;AAD/B,MAAd,CADG,GAGH,KAAK2B,QAAL,CAAc;AAAE3B,MAAAA,eAAe,EAAE,CAAnB;AAAsBD,MAAAA,UAAU,EAAE;AAAlC,KAAd,CAHJ;AAID;;AAED,QAAMd,cAAN,GAAuB;AACrB,UAAM4C,KAAK,GAAGhB,YAAY,CAACiB,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMC,MAAM,GAAG,MAAMpD,oBAAoB,CAACkD,KAAD,CAAzC;AACA,SAAKF,QAAL,CAAc;AAAE/B,MAAAA,SAAS,EAAEmC,MAAb;AAAqBlC,MAAAA,SAAS,EAAE;AAAhC,KAAd;AACD;;AAEDP,EAAAA,YAAY,GAAG;AACb,SAAKqC,QAAL,CAAc;AAAE3B,MAAAA,eAAe,EAAE,EAAnB;AAAuBC,MAAAA,OAAO,EAAE;AAAhC,KAAd;AACD;;AAEDd,EAAAA,WAAW,CAAC;AAAE6C,IAAAA;AAAF,GAAD,EAAa;AACtB,SAAKL,QAAL,CAAc;AAAE5B,MAAAA,UAAU,EAAE;AAAd,KAAd;AACA,QAAIiC,MAAM,CAACC,SAAP,KAAqB,gBAAzB,EAA2C,KAAK1C,cAAL;AAC5C;;AAEDF,EAAAA,uBAAuB,GAAG;AACxB,SAAKsC,QAAL,CAAeC,SAAD,sBAAqBA,SAArB;AACZ9B,MAAAA,aAAa,EAAE8B,SAAS,CAAC9B,aAAV,GAA0B;AAD7B,MAAd;AAEA,SAAKR,YAAL;AACA,SAAKqC,QAAL,CAAc;AAAE5B,MAAAA,UAAU,EAAE;AAAd,KAAd;AACD;;AAEDmC,EAAAA,MAAM,GAAG;AAAA,yBAKe,KAAKvC,KALpB;AAAA,UACCC,SADD,gBACCA,SADD;AAAA,UAELC,SAFK,gBAELA,SAFK;AAAA,UAGLC,aAHK,gBAGLA,aAHK;AAAA,UAILC,UAJK,gBAILA,UAJK;AAAA,UAKLC,eALK,gBAKLA,eALK;AAOP,QAAIH,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAEf,UAAMsC,iBAAiB,GAAG,CAA1B;;AACA,QAAIrC,aAAa,GAAGqC,iBAApB,EAAuC;AACrC,WAAKzC,uBAAL;AACA,aAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,UAAM0C,cAAc,GAAGxC,SAAS,CAACE,aAAD,CAAhC;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC,aAAYA,aAAa,GAAG,CAAE,EAAnE,CADF,EAEE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB,GAAEE,eAAgB,EAA1C,CAFF,CAFF,EAME;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,oBADZ;AAEE,qBAAY,mBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIIoC,cAAc,CAACC,QAJnB,CADF,CANF,EAcE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCD,cAAc,CAACE,QAAjD,CAFF,CAFF,EAME;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIF,cAAc,CAACG,OAAf,CAAuBC,GAAvB,CAA4BC,MAAD,IAC3B;AACE,MAAA,GAAG,EAAGA,MAAM,CAACC,QADf;AAEE,qBACED,MAAM,CAACC,QAAP,KAAoB,CAApB,GACI,gBADJ,GAEK,gBAAeD,MAAM,CAACC,QAAP,GAAkB,CAAE,EAL5C;AAOE,MAAA,IAAI,EAAC,QAPP;AAQE,MAAA,SAAS,EAAGD,MAAM,CAACC,QAAP,KAAoB,CAApB,GAAwB,gBAAxB,GAA2C,cARzD;AASE,MAAA,QAAQ,EAAG3C,UATb;AAUE,MAAA,OAAO,EAAG,KAAKZ,WAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYIsD,MAAM,CAACA,MAZX,CADA,CADJ,CANF,CAdF,EAuCE;AACE,MAAA,SAAS,EAAC,sBADZ;AAEE,qBAAY,UAFd;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,MAAM,EAAG,CAAC1C,UAJZ;AAKE,MAAA,OAAO,EAAG,MAAM,KAAKV,uBAAL,EALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAvCF,CADF;AAqDD;;AA1L+B;;AA6LlC,MAAMsD,eAAe,GAAIhD,KAAD,KAAY;AAClCY,EAAAA,WAAW,EAAEZ,KAAK,CAACgB,MADe;AAElCW,EAAAA,UAAU,EAAE3B,KAAK,CAACgB,MAAN,CAAaC,KAFS;AAGlCY,EAAAA,eAAe,EAAE7B,KAAK,CAACgB,MAAN,CAAaL;AAHI,CAAZ,CAAxB;;AAMA,MAAMsC,kBAAkB,GAAIC,QAAD,KAAe;AACxCtB,EAAAA,cAAc,EAAE,CAACX,KAAD,EAAQN,UAAR,KAAuBuC,QAAQ,CAACjE,QAAQ,CAACgC,KAAD,EAAQN,UAAR,CAAT,CADP;AAExCc,EAAAA,sBAAsB,EACtB,CAACZ,IAAD,EAAOI,KAAP,EAAcS,IAAd,KAAuBwB,QAAQ,CAAChE,gBAAgB,CAAC2B,IAAD,EAAOI,KAAP,EAAcS,IAAd,CAAjB;AAHS,CAAf,CAA3B;;AAMAvC,SAAS,CAACgE,SAAV,GAAsB;AACpBxB,EAAAA,UAAU,EAAE5C,SAAS,CAACqE,MAAV,CAAiBC,UADT;AAEpBxB,EAAAA,eAAe,EAAE9C,SAAS,CAACqE,MAAV,CAAiBC,UAFd;AAGpBzB,EAAAA,cAAc,EAAE7C,SAAS,CAACuE,IAAV,CAAeD,UAHX;AAIpB5B,EAAAA,sBAAsB,EAAE1C,SAAS,CAACuE,IAAV,CAAeD,UAJnB;AAKpBzC,EAAAA,WAAW,EAAE7B,SAAS,CAACwE,KAAV,CAAgB;AAC3B1C,IAAAA,IAAI,EAAE9B,SAAS,CAACyE,MAAV,CAAiBH,UADI;AAE3BvC,IAAAA,aAAa,EAAE/B,SAAS,CAACyE,MAAV,CAAiBH,UAFL;AAG3B3B,IAAAA,IAAI,EAAE3C,SAAS,CAACyE,MAAV,CAAiBH,UAHI;AAI3BpC,IAAAA,KAAK,EAAElC,SAAS,CAACqE,MAAV,CAAiBC;AAJG,GAAhB,EAKVA;AAViB,CAAtB;AAaA,eAAexE,OAAO,CAACmE,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C9D,SAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchQuestionNAnswer } from '../../services';\nimport { addScore } from '../../store/ducks/player/actions';\nimport getCurrentPlayer from '../../store/ducks/ranking/actions';\nimport './Questions.css';\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestions = this.fetchQuestions.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.countdown = this.countdown.bind(this);\n    this.handleClickNextQuestion = this.handleClickNextQuestion.bind(this);\n    this.resetCounter = this.resetCounter.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.setLocalStorage = this.setLocalStorage.bind(this);\n    this.getQuestionLevelScore = this.getQuestionLevelScore.bind(this);\n    this.getCurrentPlayerToState = this.getCurrentPlayerToState.bind(this);\n\n    this.state = {\n      questions: [],\n      isLoading: true,\n      questionIndex: 0,\n      isDisabled: false,\n      counterInterval: 30,\n      counter: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n    const milisegundos = 1000;\n    setInterval(this.countdown, milisegundos);\n    this.setLocalStorage();\n  }\n\n  setLocalStorage(totalScore = 0, assertions = 0) {\n    const { playerProps } = this.props;\n    const { name, gravatarEmail } = playerProps;\n    const playerToStorage = { player: {\n      name,\n      assertions,\n      score: totalScore,\n      gravatarEmail } };\n    localStorage.setItem('state', JSON.stringify(playerToStorage));\n  }\n\n  getQuestionLevelScore(questionLevel, levelScore) {\n    switch (questionLevel) {\n    case 'easy': {\n      levelScore = 1;\n      return levelScore;\n    }\n    case 'medium': {\n      levelScore = 2;\n      return levelScore;\n    }\n    case 'hard': {\n      const hardLevelScore = 3;\n      levelScore = hardLevelScore;\n      return levelScore;\n    }\n    default:\n      return levelScore;\n    }\n  }\n\n  getCurrentPlayerToState() {\n    const { getCurrentPlayerAction } = this.props;\n    const { playerProps: { name, score, hash } } = this.props;\n    getCurrentPlayerAction(name, score, hash);\n  }\n\n  calculateScore() {\n    const { questions, questionIndex, counterInterval } = this.state;\n    const { scoreProps, addScoreAction, assertionsProps } = this.props;\n    const questionLevel = questions[questionIndex].difficulty;\n    const levelScore = 1;\n    const defaultPoint = 10;\n\n    this.getQuestionLevelScore(questionLevel, levelScore);\n\n    const totalScore = scoreProps + (defaultPoint + counterInterval * levelScore);\n\n    const assertions = assertionsProps + 1;\n\n    addScoreAction(totalScore, assertions);\n\n    this.setLocalStorage(totalScore, assertions);\n  }\n\n  countdown() {\n    const { counterInterval } = this.state;\n    return counterInterval > 0\n      ? this.setState((prevState) => ({ ...prevState,\n        counterInterval: prevState.counterInterval - 1 }))\n      : this.setState({ counterInterval: 0, isDisabled: true });\n  }\n\n  async fetchQuestions() {\n    const token = localStorage.getItem('token');\n    const result = await fetchQuestionNAnswer(token);\n    this.setState({ questions: result, isLoading: false });\n  }\n\n  resetCounter() {\n    this.setState({ counterInterval: 30, counter: 0 });\n  }\n\n  handleClick({ target }) {\n    this.setState({ isDisabled: true });\n    if (target.className === 'correct-answer') this.calculateScore();\n  }\n\n  handleClickNextQuestion() {\n    this.setState((prevState) => ({ ...prevState,\n      questionIndex: prevState.questionIndex + 1 }));\n    this.resetCounter();\n    this.setState({ isDisabled: false });\n  }\n\n  render() {\n    const { questions,\n      isLoading,\n      questionIndex,\n      isDisabled,\n      counterInterval } = this.state;\n\n    if (isLoading) return <h1>Is Loading</h1>;\n\n    const numberOfQuestions = 4;\n    if (questionIndex > numberOfQuestions) {\n      this.getCurrentPlayerToState();\n      return <Redirect to=\"/feedback\" />;\n    }\n\n    const questionToLoad = questions[questionIndex];\n\n    return (\n      <div className=\"questions-display\">\n\n        <div className=\"header-question-display\">\n          <h1 className=\"question-paragraph\">{`Question. ${questionIndex + 1}`}</h1>\n          <h2 className=\"timer\">{`${counterInterval}` }</h2>\n        </div>\n        <div className=\"category-div\">\n          <h2\n            className=\"category-paragraph\"\n            data-testid=\"question-category\"\n          >\n            { questionToLoad.category }\n          </h2>\n        </div>\n        <div className=\"question-and-answer-box\">\n\n          <div className=\"question-box\">\n\n            <h3 data-testid=\"question-text\">{ questionToLoad.question }</h3>\n          </div>\n          <div className=\"answer-box\">\n            { questionToLoad.answers.map((answer) => (\n              <button\n                key={ answer.position }\n                data-testid={\n                  answer.position === 0\n                    ? 'correct-answer'\n                    : `wrong-answer-${answer.position - 1}`\n                }\n                type=\"button\"\n                className={ answer.position === 0 ? 'correct-answer' : 'wrong-answer' }\n                disabled={ isDisabled }\n                onClick={ this.handleClick }\n              >\n                { answer.answer }\n              </button>\n            ))}\n          </div>\n        </div>\n        <button\n          className=\"next-question-button\"\n          data-testid=\"btn-next\"\n          type=\"button\"\n          hidden={ !isDisabled }\n          onClick={ () => this.handleClickNextQuestion() }\n        >\n          Next Question\n\n        </button>\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  playerProps: state.player,\n  scoreProps: state.player.score,\n  assertionsProps: state.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addScoreAction: (score, assertions) => dispatch(addScore(score, assertions)),\n  getCurrentPlayerAction:\n  (name, score, hash) => dispatch(getCurrentPlayer(name, score, hash)),\n});\n\nQuestions.propTypes = {\n  scoreProps: PropTypes.number.isRequired,\n  assertionsProps: PropTypes.number.isRequired,\n  addScoreAction: PropTypes.func.isRequired,\n  getCurrentPlayerAction: PropTypes.func.isRequired,\n  playerProps: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    gravatarEmail: PropTypes.string.isRequired,\n    hash: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}