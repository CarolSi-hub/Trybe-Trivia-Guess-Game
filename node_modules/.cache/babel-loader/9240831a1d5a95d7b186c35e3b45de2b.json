{"ast":null,"code":"var _jsxFileName = \"/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/src/pages/Login/index.js\";\nimport React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport logo from '../../images/logo200x200.png';\nimport './Login.css';\nimport * as PlayerActions from '../../store/ducks/player/actions';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.validateEmailAndName = this.validateEmailAndName.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      name: '',\n      gravatarEmail: '',\n      isButtonAble: true\n    };\n  }\n\n  validateEmailAndName(email, name) {\n    const re = /[A-Z0-9]{1,}@[A-Z0-9]{2,}\\.[A-Z0-9]{2,}/i;\n    const validate = !!(re.test(email.toLowerCase()) && name !== '');\n    return validate;\n  }\n\n  handleInputChange({\n    target: {\n      id,\n      value\n    }\n  }) {\n    this.setState({\n      [id]: value\n    }, () => {\n      const _this$state = this.state,\n            gravatarEmail = _this$state.gravatarEmail,\n            name = _this$state.name;\n      const validate = this.validateEmailAndName(gravatarEmail, name) ? this.setState({\n        isButtonAble: false\n      }) : this.setState({\n        isButtonAble: true\n      });\n      return validate;\n    });\n  }\n\n  async handleClick() {\n    const _this$props = this.props,\n          history = _this$props.history,\n          signInAction = _this$props.signInAction,\n          getTokenAction = _this$props.getTokenAction;\n    await getTokenAction();\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          gravatarEmail = _this$state2.gravatarEmail;\n    const hash = md5(gravatarEmail);\n    signInAction({\n      name,\n      gravatarEmail,\n      hash\n    });\n    history.push('/game');\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          name = _this$state3.name,\n          gravatarEmail = _this$state3.gravatarEmail,\n          isButtonAble = _this$state3.isButtonAble;\n    return React.createElement(\"div\", {\n      className: \"login-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/settings\",\n      \"data-testid\": \"btn-settings\",\n      className: \"configure-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Configura\\xE7\\xF5es\"), React.createElement(\"img\", {\n      src: logo,\n      alt: \"Minha imagem de teste\",\n      className: \"image-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"group-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"by Main-Group-27\"), React.createElement(\"form\", {\n      className: \"login-form-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"input-player-name\",\n      className: \"login-input\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Enter your name\",\n      value: name,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      \"data-testid\": \"input-gravatar-email\",\n      className: \"login-input\",\n      name: \"gravatarEmail\",\n      id: \"gravatarEmail\",\n      value: gravatarEmail,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      className: \"login-button\",\n      disabled: isButtonAble,\n      onClick: () => this.handleClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Jogar\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  signInAction: user => dispatch(PlayerActions.signIn(user)),\n  getTokenAction: () => dispatch(PlayerActions.getToken())\n});\n\nLogin.propTypes = {\n  signInAction: PropTypes.func.isRequired,\n  getTokenAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/src/pages/Login/index.js"],"names":["React","Component","md5","connect","PropTypes","Link","logo","PlayerActions","Login","constructor","validateEmailAndName","bind","handleInputChange","handleClick","state","name","gravatarEmail","isButtonAble","email","re","validate","test","toLowerCase","target","id","value","setState","props","history","signInAction","getTokenAction","hash","push","render","mapDispatchToProps","dispatch","user","signIn","getToken","propTypes","func","isRequired","shape"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport logo from '../../images/logo200x200.png';\nimport './Login.css';\nimport * as PlayerActions from '../../store/ducks/player/actions';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.validateEmailAndName = this.validateEmailAndName.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      name: '',\n      gravatarEmail: '',\n      isButtonAble: true,\n    };\n  }\n\n  validateEmailAndName(email, name) {\n    const re = /[A-Z0-9]{1,}@[A-Z0-9]{2,}\\.[A-Z0-9]{2,}/i;\n    const validate = !!((re.test(email.toLowerCase()) && name !== ''));\n    return validate;\n  }\n\n  handleInputChange({ target: { id, value } }) {\n    this.setState({ [id]: value }, () => {\n      const { gravatarEmail, name } = this.state;\n      const validate = this.validateEmailAndName(gravatarEmail, name)\n        ? this.setState({ isButtonAble: false })\n        : this.setState({ isButtonAble: true });\n      return validate;\n    });\n  }\n\n  async handleClick() {\n    const { history, signInAction, getTokenAction } = this.props;\n    await getTokenAction();\n    const { name, gravatarEmail } = this.state;\n    const hash = md5(gravatarEmail);\n    signInAction({ name, gravatarEmail, hash });\n    history.push('/game');\n  }\n\n  render() {\n    const { name, gravatarEmail, isButtonAble } = this.state;\n    return (\n\n      <div className=\"login-page\">\n        <div className=\"login-form\">\n          <Link to=\"/settings\" data-testid=\"btn-settings\" className=\"configure-button\">\n            Configurações\n          </Link>\n          <img src={ logo } alt=\"Minha imagem de teste\" className=\"image-logo\" />\n          <p className=\"group-name\">by Main-Group-27</p>\n          <form className=\"login-form-form\">\n            <input\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              className=\"login-input\"\n              name=\"name\"\n              id=\"name\"\n              placeholder=\"Enter your name\"\n              value={ name }\n              onChange={ this.handleInputChange }\n            />\n            <input\n              type=\"text\"\n              data-testid=\"input-gravatar-email\"\n              className=\"login-input\"\n              name=\"gravatarEmail\"\n              id=\"gravatarEmail\"\n              value={ gravatarEmail }\n              onChange={ this.handleInputChange }\n            />\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              className=\"login-button\"\n              disabled={ isButtonAble }\n              onClick={ () => this.handleClick() }\n            >\n              Jogar\n            </button>\n          </form>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  signInAction: (user) => dispatch(PlayerActions.signIn(user)),\n  getTokenAction: (() => dispatch(PlayerActions.getToken())),\n});\n\nLogin.propTypes = {\n  signInAction: PropTypes.func.isRequired,\n  getTokenAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}