{"ast":null,"code":"const API_URL_TOKEN = 'https://opentdb.com/api_token.php?command=request';\n\nasync function fetchToken() {\n  const response = await fetch(API_URL_TOKEN);\n  const result = await response.json();\n  return result;\n}\n\nconst five = 5;\n\nconst getRandomNumber = () => Math.floor(Math.random() * five);\n\nfunction toRamQuestion(questions) {\n  const newAnswer = questions.map(question => {\n    const answers = [question.correct_answer, ...question.incorrect_answers];\n    return answers.reduce((acc, answer, index) => {\n      acc[index] = {\n        position: index,\n        number: getRandomNumber(),\n        answer\n      };\n      return acc.sort((answer1, answer2) => answer2.number - answer1.number);\n    }, []);\n  });\n  const questionsOrdered = questions.map((question, index) => {\n    const newQuestion = {\n      question: question.question,\n      category: question.category,\n      answers: newAnswer[index],\n      difficulty: question.difficulty\n    };\n    return newQuestion;\n  });\n  return questionsOrdered;\n}\n\nasync function fetchQuestionNAnswer(token) {\n  const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const result = await response.json();\n  const questions = result.results;\n  const readyQuestion = toRamQuestion(questions);\n  return readyQuestion;\n}\n\nexport { fetchToken, fetchQuestionNAnswer };","map":{"version":3,"sources":["/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/src/services/index.js"],"names":["API_URL_TOKEN","fetchToken","response","fetch","result","json","five","getRandomNumber","Math","floor","random","toRamQuestion","questions","newAnswer","map","question","answers","correct_answer","incorrect_answers","reduce","acc","answer","index","position","number","sort","answer1","answer2","questionsOrdered","newQuestion","category","difficulty","fetchQuestionNAnswer","token","results","readyQuestion"],"mappings":"AAAA,MAAMA,aAAa,GAAG,mDAAtB;;AAEA,eAAeC,UAAf,GAA4B;AAC1B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAD,CAA5B;AACA,QAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACA,SAAOD,MAAP;AACD;;AAED,MAAME,IAAI,GAAG,CAAb;;AACA,MAAMC,eAAe,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,IAA3B,CAA9B;;AAEA,SAASK,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,QAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAeC,QAAD,IAAc;AAC5C,UAAMC,OAAO,GAAG,CAACD,QAAQ,CAACE,cAAV,EAA0B,GAAGF,QAAQ,CAACG,iBAAtC,CAAhB;AACA,WAAOF,OAAO,CAACG,MAAR,CAAe,CAACC,GAAD,EAAMC,MAAN,EAAcC,KAAd,KAAwB;AAC5CF,MAAAA,GAAG,CAACE,KAAD,CAAH,GAAa;AAAEC,QAAAA,QAAQ,EAAED,KAAZ;AAAmBE,QAAAA,MAAM,EAAEjB,eAAe,EAA1C;AAA8Cc,QAAAA;AAA9C,OAAb;AACA,aAAOD,GAAG,CAACK,IAAJ,CAAS,CAACC,OAAD,EAAUC,OAAV,KAAsBA,OAAO,CAACH,MAAR,GAAiBE,OAAO,CAACF,MAAxD,CAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID,GANiB,CAAlB;AAQA,QAAMI,gBAAgB,GAAGhB,SAAS,CAACE,GAAV,CAAc,CAACC,QAAD,EAAWO,KAAX,KAAqB;AAC1D,UAAMO,WAAW,GAAG;AAClBd,MAAAA,QAAQ,EAAEA,QAAQ,CAACA,QADD;AAElBe,MAAAA,QAAQ,EAAEf,QAAQ,CAACe,QAFD;AAGlBd,MAAAA,OAAO,EAAEH,SAAS,CAACS,KAAD,CAHA;AAIlBS,MAAAA,UAAU,EAAEhB,QAAQ,CAACgB;AAJH,KAApB;AAMA,WAAOF,WAAP;AACD,GARwB,CAAzB;AASA,SAAOD,gBAAP;AACD;;AAED,eAAeI,oBAAf,CAAoCC,KAApC,EAA2C;AACzC,QAAM/B,QAAQ,GAAG,MAAMC,KAAK,CAAE,8CAA6C8B,KAAM,EAArD,CAA5B;AACA,QAAM7B,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACA,QAAMO,SAAS,GAAGR,MAAM,CAAC8B,OAAzB;AACA,QAAMC,aAAa,GAAGxB,aAAa,CAACC,SAAD,CAAnC;AAEA,SAAOuB,aAAP;AACD;;AAED,SAASlC,UAAT,EAAqB+B,oBAArB","sourcesContent":["const API_URL_TOKEN = 'https://opentdb.com/api_token.php?command=request';\n\nasync function fetchToken() {\n  const response = await fetch(API_URL_TOKEN);\n  const result = await response.json();\n  return result;\n}\n\nconst five = 5;\nconst getRandomNumber = () => Math.floor(Math.random() * five);\n\nfunction toRamQuestion(questions) {\n  const newAnswer = questions.map((question) => {\n    const answers = [question.correct_answer, ...question.incorrect_answers];\n    return answers.reduce((acc, answer, index) => {\n      acc[index] = { position: index, number: getRandomNumber(), answer };\n      return acc.sort((answer1, answer2) => answer2.number - answer1.number);\n    }, []);\n  });\n\n  const questionsOrdered = questions.map((question, index) => {\n    const newQuestion = {\n      question: question.question,\n      category: question.category,\n      answers: newAnswer[index],\n      difficulty: question.difficulty,\n    };\n    return newQuestion;\n  });\n  return questionsOrdered;\n}\n\nasync function fetchQuestionNAnswer(token) {\n  const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const result = await response.json();\n  const questions = result.results;\n  const readyQuestion = toRamQuestion(questions);\n\n  return readyQuestion;\n}\n\nexport { fetchToken, fetchQuestionNAnswer };\n"]},"metadata":{},"sourceType":"module"}