{"ast":null,"code":"import _objectSpread from \"/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport PlayerTypes from './types';\nimport initialState from '../initialState';\nconst INITIAL_STATE = initialState.player;\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case PlayerTypes.SIGNIN:\n      {\n        const _action$payload = action.payload,\n              name = _action$payload.name,\n              gravatarEmail = _action$payload.gravatarEmail,\n              hash = _action$payload.hash;\n        return _objectSpread({}, state, {\n          name,\n          gravatarEmail,\n          hash\n        });\n      }\n\n    case PlayerTypes.INCLUDE_TOKEN:\n      {\n        const token = action.token;\n        return _objectSpread({}, state, {\n          token\n        });\n      }\n\n    case PlayerTypes.ADD_SCORE:\n      {\n        const score = action.score,\n              assertions = action.assertions;\n        return _objectSpread({}, state, {\n          score,\n          assertions\n        });\n      }\n\n    case PlayerTypes.RESET_PLAYER:\n      {\n        const name = INITIAL_STATE.name,\n              gravatarEmail = INITIAL_STATE.gravatarEmail,\n              token = INITIAL_STATE.token,\n              hash = INITIAL_STATE.hash,\n              score = INITIAL_STATE.score,\n              assertions = INITIAL_STATE.assertions;\n        return _objectSpread({}, state, {\n          name,\n          gravatarEmail,\n          token,\n          hash,\n          score,\n          assertions\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default player;","map":{"version":3,"sources":["/home/ana/Documentos/Trybe/Trybe-Projects/Trybe-Trivia-Guess-Game/src/store/ducks/player/index.js"],"names":["PlayerTypes","initialState","INITIAL_STATE","player","state","action","type","SIGNIN","payload","name","gravatarEmail","hash","INCLUDE_TOKEN","token","ADD_SCORE","score","assertions","RESET_PLAYER"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,MAAMC,aAAa,GAAGD,YAAY,CAACE,MAAnC;;AAEA,MAAMA,MAAM,GAAG,CAACC,KAAK,GAAGF,aAAT,EAAwBG,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKN,WAAW,CAACO,MAAjB;AAAyB;AAAA,gCACeF,MAAM,CAACG,OADtB;AAAA,cACfC,IADe,mBACfA,IADe;AAAA,cACTC,aADS,mBACTA,aADS;AAAA,cACMC,IADN,mBACMA,IADN;AAEvB,iCAAYP,KAAZ;AAAmBK,UAAAA,IAAnB;AAAyBC,UAAAA,aAAzB;AAAwCC,UAAAA;AAAxC;AACD;;AACD,SAAKX,WAAW,CAACY,aAAjB;AAAgC;AAAA,cACtBC,KADsB,GACZR,MADY,CACtBQ,KADsB;AAE9B,iCAAYT,KAAZ;AAAmBS,UAAAA;AAAnB;AACD;;AACD,SAAKb,WAAW,CAACc,SAAjB;AAA4B;AAAA,cAClBC,KADkB,GACIV,MADJ,CAClBU,KADkB;AAAA,cACXC,UADW,GACIX,MADJ,CACXW,UADW;AAE1B,iCAAYZ,KAAZ;AAAmBW,UAAAA,KAAnB;AAA0BC,UAAAA;AAA1B;AACD;;AACD,SAAKhB,WAAW,CAACiB,YAAjB;AAA+B;AAAA,cACrBR,IADqB,GACmCP,aADnC,CACrBO,IADqB;AAAA,cACfC,aADe,GACmCR,aADnC,CACfQ,aADe;AAAA,cACAG,KADA,GACmCX,aADnC,CACAW,KADA;AAAA,cACOF,IADP,GACmCT,aADnC,CACOS,IADP;AAAA,cACaI,KADb,GACmCb,aADnC,CACaa,KADb;AAAA,cACoBC,UADpB,GACmCd,aADnC,CACoBc,UADpB;AAE7B,iCAAYZ,KAAZ;AAAmBK,UAAAA,IAAnB;AAAyBC,UAAAA,aAAzB;AAAwCG,UAAAA,KAAxC;AAA+CF,UAAAA,IAA/C;AAAqDI,UAAAA,KAArD;AAA4DC,UAAAA;AAA5D;AACD;;AACD;AACE,aAAOZ,KAAP;AAlBF;AAoBD,CArBD;;AAuBA,eAAeD,MAAf","sourcesContent":["import PlayerTypes from './types';\nimport initialState from '../initialState';\n\nconst INITIAL_STATE = initialState.player;\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case PlayerTypes.SIGNIN: {\n    const { name, gravatarEmail, hash } = action.payload;\n    return { ...state, name, gravatarEmail, hash };\n  }\n  case PlayerTypes.INCLUDE_TOKEN: {\n    const { token } = action;\n    return { ...state, token };\n  }\n  case PlayerTypes.ADD_SCORE: {\n    const { score, assertions } = action;\n    return { ...state, score, assertions };\n  }\n  case PlayerTypes.RESET_PLAYER: {\n    const { name, gravatarEmail, token, hash, score, assertions } = INITIAL_STATE;\n    return { ...state, name, gravatarEmail, token, hash, score, assertions };\n  }\n  default:\n    return state;\n  }\n};\n\nexport default player;\n"]},"metadata":{},"sourceType":"module"}